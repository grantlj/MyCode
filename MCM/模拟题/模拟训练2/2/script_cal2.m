clear;clc;
%1~100点的取点情况
take=[ ones(30,1) ;[1;0;0;1;0;0;0;0;0;0;1;0;0;0;1;1;1;0;1;1;0;0;0;0;0;1;0;0;0;1;0;1;1;0;0;0;0;0;1;0;0;1;1;0;0;1;1;0;0;1;0;0;0;1;0;0;1;1;0;1;1;0;0;0;0;0;0;0;0;0]];
oldLonLat=[108.952954	34.324828
108.948562	34.323762
108.943199	34.326341
108.943387	34.333265
108.953161	34.334874
108.944636	34.338787
108.952532	34.350865
108.950232	34.347572
108.945525	34.353369
108.936075	34.362644
108.966896	34.321862
108.958515	34.320289
108.954131	34.320766
108.953233	34.319536
108.954643	34.325223
108.95502	34.326699
108.94336	34.327779
108.959745	34.332914
108.953439	34.333272
108.954014	34.336238
108.954176	34.339934
108.940288	34.339114
108.944591	34.342825
108.932985	34.34673
108.962386	34.347557
108.959018	34.347512
108.95617	34.34784
108.945435	34.362294
108.953287	34.330239
108.95017	34.353466
108.945121	34.31967
108.937072	34.316808
108.937072	34.323129
108.94354	34.323307
108.929958	34.32283
108.935779	34.328435
108.928377	34.331893
108.936929	34.332668
108.94354	34.330462
108.927514	34.335888
108.936569	34.336245
108.945193	34.336424
108.935707	34.339405
108.935563	34.343161
108.927658	34.342922
108.936785	34.347572
108.943827	34.347632
108.927442	34.346916
108.935779	34.350552
108.926867	34.353056
108.936857	34.353771
108.936138	34.357645
108.927514	34.357884
108.945049	34.358718
108.945768	34.366227
108.951301	34.367896
108.947421	34.361221
108.952308	34.364738
108.952954	34.358241
108.959566	34.35985
108.960284	34.353652
108.967399	34.34781
108.955254	34.350195
108.964093	34.351983
108.953098	34.343757
108.966177	34.343042
108.957194	34.342684
108.962297	34.345009
108.963375	34.341074
108.972034	34.342714
108.960213	34.336603
108.960716	34.333145
108.971459	34.346708
108.975628	34.33556
108.963985	34.330254
108.971891	34.33872
108.971172	34.328584
108.969088	34.332162
108.966932	34.335679
108.960788	34.328435
108.960788	34.323785
108.966824	34.326289
108.971711	34.325275
108.974226	34.320684
108.976813	34.316868
108.969268	34.316808
108.962584	34.316927
108.955182	34.317702
108.968405	34.324275
108.971567	34.357764
108.966177	34.353413
108.97128	34.350254
108.949217	34.340597
108.949002	34.334159
108.948858	34.32927
108.947996	34.326408
108.947852	34.321698
108.948283	34.318537
108.957913	34.322473
108.950152	34.317166
];

%100个点的需求
oldDemand=[15 22 30
23 24 35
38 28 31
38 32 22
17 23 28
32 12 10
13 35 34
40 22 16
26 19 19
18 31 37
18 24 27
35 20 33
7 27 28
12 19 13
38 16 12
17 22 6
21 39 23
23 38 32
28 20 20
23 21 20
15 33 34
35 7 6
15 20 38
34 9 10
21 9 13
23 21 20
35 30 35
18 21 20
13 22 17
18 30 38
40 27 8
7 27 28
8 27 33
17 22 26
8 18 21
15 37 22
8 14 18
6 19 12
9 21 23
11 28 20
32 12 12
13 9 9
24 17 16
16 14 14
18 26 23
8 37 39
23 36 32
17 12 8
33 18 35
38 37 32
15 13 14
14 9 10
5 17 7
11 19 23
12 20 22
40 40 40
15 18 14
5 12 11
15 23 24
33 32 37
15 7 13
7 37 38
24 28 33
17 8 6
8 28 21
5 7 12
18 8 8
21 12 14
39 21 23
11 12 10
32 12 10
23 39 34
20 37 36
6 10 9
8 11 13
19 27 29
33 36 28
7 9 7
7 18 15
18 36 22
25 23 14
14 9 10
5 7 11
21 29 33
3 8 7
13 21 20
13 38 36
25 33 35
8 10 8
23 32 37
32 22 20
7 19 14
4 6 7
26 8 9
8 12 14
6 7 5
9 16 9
7 7 8
4 8 11
8 16 12];
%提取出坐标于每一点的需求
LonLat=[];demand=[];
for i=1:100
    if take(i)==1
    LonLat=[LonLat;oldLonLat(i,:)];
    demand=[demand;oldDemand(i,:)];
    end
end

%点数
n=sum(take,1);

%新增点数
newNodeNum=n-30;

%计算自行车量
bikeNum=(200-newNodeNum*5)/0.1;

%求出任意两点的距离
for i=1:n
    for j=1:n
        distMat(i,j)=distance(LonLat(i,2),LonLat(i,1),LonLat(i,2),LonLat(j,1),6378.1)+distance(LonLat(i,2),LonLat(j,1),LonLat(j,2),LonLat(j,1),6378.1);
    end
end

%对distanceMatrix取倒数,并使小于1/2的为0，最后归一化，
%得到i到j点的概率
distMatDown=1./distMat;
distMatDown(distMatDown<0.5)=0;
distMatDown(distMatDown==inf)=0;
sumRows=sum(distMatDown,2);
for i=1:n
    probabMat(i,:)=distMatDown(i,:)./sumRows(i,1);
end

%用probabMat与demand矩阵，求每个次点的是多了还是少了（少了为负，多了为正），储存在changeMat。（30*3）;
for i=1:3
    for j=1:n
        
        for k=1:n
            tempMat(k,:)=probabMat(k,:).*demand(k,i);
        end
        changeMat(j,i)=sum(tempMat(:,j))-sum(tempMat(j,:));
            
    end
end

changeMat=round(changeMat);

%修正可能出现的出于入不平衡
banlance=sum(changeMat);
for i=1:3
    for j=1:abs(banlance(i))
        if banlance(i)==0
            continue;
        elseif banlance(i)>0
            changeMat(j,i)=changeMat(j,i)-1;
        else
            changeMat(j,i)=changeMat(j,i)+1;
        end
    end
end

realDemand=ceil(demand.*1.1);
realDemand(realDemand>40)=40;
%求出realDemand与changeMat之后放入LinGO求解，得到initVal
initVal=[30;25;33;26;27;40;40;40;39;40;36;40;24;26;31;36;28;19;40;39;40;40;25;23;29;25;21;22;35;40;29;27;30;39;40;39;38;30;31;29;21;15;40;39;16;33;25;7;40;40;40;39;40;38;31;28;22;29;24;22;31;37;40;39;26;13;25;22;40;38;33;20;24;12;15;32;24;22;39;40;39;32;24;22;27;25;19;29;33;40;40;30;30;20;25;29;36;16;25;24;29;34;18;40;40;35;40;40;37;39;39;40;40;40;40;40;40;37;36;40;11;40;40;36;31;37;40;35;34;36;40;40;28;40;40;23;30;40;37;40;40;36;40;34;24;32;40;22;40;40;28;37;40;26;36;40;36;28;22];
initVal=reshape(initVal,3,n)';

transportMat(:,1)=initVal(:,2)-(initVal(:,1)+changeMat(:,1));
transportMat(:,2)=initVal(:,3)-(initVal(:,2)+changeMat(:,2));
transportMat(:,3)=initVal(:,1)-(initVal(:,3)+changeMat(:,3));